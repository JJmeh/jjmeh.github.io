{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["children","className","key","href","App","transition","map","child","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAIMA,G,MAAW,CACf,yBAAKC,UAAU,WAAWC,IAAI,OAC5B,wBAAID,UAAU,YAAd,UACA,4BACE,wCACA,yCAGJ,yBAAKA,UAAU,cAAcC,IAAI,UAC/B,wBAAID,UAAU,YAAd,kBAMF,yBAAKA,UAAU,cAAcC,IAAI,UAC/B,wBAAID,UAAU,oBAAd,qBACA,wBAAIA,UAAU,oBAAd,eAMF,yBAAKA,UAAU,aAAaC,IAAI,SAC9B,wBAAID,UAAU,YAAd,kBAMF,yBAAKA,UAAU,YAAYC,IAAI,QAC7B,wBAAID,UAAU,YAAd,iBAMF,yBAAKA,UAAU,cAAcC,IAAI,UAC/B,wBAAID,UAAU,WAAd,gBACA,wBAAIA,UAAU,WAAd,oBAMF,yBAAKA,UAAU,WAAWC,IAAI,UAC5B,4BAAI,uBAAGC,KAAK,qCAAR,eAyBOC,E,uKAVX,OACE,yBAAKH,UAAU,OACb,kBAAC,IAAD,CAAiBI,WAAW,2BACzBL,EAASM,KAAI,SAACC,GAAD,OAAWA,W,GAVjBC,aC9CEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.235b3273.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactSnapScroll from \"react-snap-scroll\";\nimport \"./App.css\";\n\nconst children = [\n  <div className=\"page red\" key=\"red\">\n    <h1 className=\"h1Custom\">Hello.</h1>\n    <h2>\n      <span>Scroll</span>\n      <span> Down</span>\n    </h2>\n  </div>,\n  <div className=\"page orange\" key=\"orange\">\n    <h1 className=\"h1Custom\">My Name is JJ</h1>\n    {/* <h2>\n      <span>Snap</span>\n      <span>Scroll</span>\n    </h2> */}\n  </div>,\n  <div className=\"page yellow\" key=\"yellow\">\n    <h1 className=\"NoSpace h1Custom\">I'm a Self-Taught</h1>\n    <h1 className=\"NoSpace h1Custom\">Programmer</h1>\n    {/* <h2>\n      <span>Snap</span>\n      <span>Scroll</span>\n    </h2> */}\n  </div>,\n  <div className=\"page green\" key=\"green\">\n    <h1 className=\"h1Custom\">And a Student</h1>\n    {/* <h2>\n      <span>Snap</span>\n      <span>Scroll</span>\n    </h2> */}\n  </div>,\n  <div className=\"page blue\" key=\"blue\">\n    <h1 className=\"h1Custom\">Who is Bored</h1>\n    {/* <h2>\n      <span>Snap</span>\n      <span>Scroll</span>\n    </h2> */}\n  </div>,\n  <div className=\"page purple\" key=\"purple\">\n    <h1 className=\"NoSpace\">So I Created</h1>\n    <h1 className=\"NoSpace\">this Website :)</h1>\n    {/* <h2>\n      <span>Snap</span>\n      <span>Scroll</span>\n    </h2> */}\n  </div>,\n  <div className=\"page end\" key=\"purple\">\n    <h1><a href=\"https://www.instagram.com/jj_meh/\">@JJ_meh</a></h1>\n    {/* <h2>\n    <span>Snap</span>\n    <span>Scroll</span>\n  </h2> */}\n  </div>,\n];\n\nclass App extends Component {\n  // state = {\n  //   transition: \"move-top-bottom\",\n  //   index: 0,\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactSnapScroll transition=\"move-top-bottom-stagger\">\n          {children.map((child) => child)}\n        </ReactSnapScroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}